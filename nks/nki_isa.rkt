;;;;
;; 
;; Copyright (c) 2025, Amazon.com. All Rights Reserved
;;
;; This file contains the semantics of NKI ISA operations.
;;
;;;;


#lang rosette

(require "nks_ops.rkt")


(provide (all-defined-out))


(define (nki.isa.nc_matmul stationary moving #:prec prec)
    (nks::mtx-matmul stationary moving #:lhs.T? #t #:prec prec))


(define (nki.isa.nc_transpose data #:prec prec)
    (nks::mtx-transpose data #:prec prec))


(define (nki.isa.activation op data #:bias [bias #f] #:scale [scale #f] #:prec prec)
    (nks::mtx-activation op data #:bias bias #:scale scale #:prec prec))


(define (nki.isa.tensor_reduce op data #:axis axis #:negate [negate #f] 
                                #:keepdims [keepdims #f] #:prec prec)
    (if negate
        (nks::mtx-elemwise nks::var-neg (nks::mtx-reduce op data #:axis axis #:prec prec) #:prec prec)
        (nks::mtx-reduce op data #:axis axis #:prec prec)))


(define (nki.isa.tensor_partition_reduce op data #:prec prec)
    (nks::mtx-reduce op data #:axis 0 #:prec prec))


(define (nki.isa.tensor_tensor data1 data2 op #:prec prec)
    (nks::mtx-elemwise op data1 #:rhs data2 #:prec prec))


(define (nki.isa.tensor_tensor_scan data0 data1 initial op0 op1 #:reverse0 [reverse0 #f]
                                   #:reverse1 [reverse1 #f] #:prec prec)
    (nks::mtx-scan data0 data1 data1 data2 initial #:reverse0 reverse0 #:reverse1 reverse1 #:prec prec))


;; This instruction is a composition of elementwise matrix operations which can be
;; combined by an optimization to generate this instruction.
(define (nki.isa.scalar_tensor_tensor data op0 operand0 op1 operand1 
                                #:reverse0 [reverse0 #f] #:reverse1 [reverse1 #f] #:prec prec)
    (define tmp_res 
        (if reverse0
            (nks::mtx-elemwise op0 operand0 #:rhs data #:prec prec)
            (nks::mtx-elemwise op0 data #:rhs operand0 #:prec prec)))
    (define result 
        (if reverse1
            (nks::mtx-elemwise op1 operand1 #:rhs tmp_res #:prec prec)
            (nks::mtx-elemwise op1 tmp_res #:rhs operand1 #:prec prec)))
    result)
    

;; This instruction is a composition of elementwise matrix operations which can be
;; combined by an optimization to generate this instruction.
(define (nki.isa.tensor_scalar data op0 operand0 #:reverse0 [reverse0 #f] #:op1 [op1 #f] 
                                #:operand1 [operand1 #f]  #:reverse1 [reverse1 #f]
                                #:prec prec)
    (if op1
        (begin
            (define tmp_res 
                (if reverse0
                    (nks::mtx-elemwise op0 operand0 #:rhs data #:prec prec)
                    (nks::mtx-elemwise op0 data #:rhs operand0 #:prec prec)))
            (define result 
                (if reverse1
                    (nks::mtx-elemwise op1 operand1 #:rhs tmp_res #:prec prec)
                    (nks::mtx-elemwise op1 tmp_res #:rhs operand1 #:prec prec)))
            result)
        (begin
            (define result 
                (if reverse0
                    (nks::mtx-elemwise op0 operand0 #:rhs data #:prec prec)
                    (nks::mtx-elemwise op0 data #:rhs operand0 #:prec prec)))
            result)))


;; This is a combination of the tensor_scalar and tensor_reduce operations. This instruction 
;; can be generated by combining these two instructions.
;; As per the NKI documentation, reverse0 is not supported for this instruction, i.e.,
;; recerse0 is always false for now. Also, the NKI API has an additional argument reduce_res
;; for the output of the reduction argument; in this implementation, we cannot write the result
;; to an argument, and therefore we explicitly return the result of reduction at the end of the function.
(define (nki.isa.tensor_scalar_reduce data op0 operand0 reduce-op #:reverse0 [reverse0 #f] #:prec prec)
    (define res1 (nki.isa.tensor_scalar data op0 operand0 #:reverse0 reverse0 #:prec prec #:mask mask))
    (define res2 (nki.isa.tensor_reduce reduce-op res1 #:axis 1 #:prec prec #:mask mask))
    (values res1 res2))


;; This is a combination of the activation and tensor_reduce operations. 
;; This instruction can be generated by combining these two instructions. Also, the NKI 
;; API has an additional argument reduce_res for the output of the reduction argument; 
;; in this implementation, we cannot write the result to an argument, and therefore we 
;; explicitly return the result of reduction at the end of the function.
(define (nki.isa.activation_reduce op data reduce-op #:bias [bias #f] #:scale [scale #f] #:prec prec)
    (define res1 (nki.isa.activation op data #:bias bias #:scale scale #:prec prec #:mask mask))
    (define res2 (nki.isa.tensor_reduce reduce-op res1 #:axis 1 #:prec prec #:mask mask))
    (values res1 res2))


(define (nki.isa.reciprocal data #:prec prec)
    (nks::mtx-elemwise nks::var-reciprocal data #:prec prec))